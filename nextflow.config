// Please do not change the order of the numbered sections!
// The expected order is: 1. Parameters - 2. Profiles - 3. Process -  4. Executor
// There is a high chance it would break the configuration of 'profiles'

manifest {
    name            = 'lifebit-ai/etl_omop2phenofile'
    homePage        = 'https://github.com//lifebit-ai/etl_omop2phenofile'
    description     = 'This is nextflow template pipeline, which helps accelerate the pipeline development process'
    mainScript      = 'main.nf'
    version         = '1.3.0'
}

// 1. Parameters

// NOTE:
// Initialise the values of the params to the preferred default value or to false
params {
    // output folder options
    outdir          = 'results'
    tracedir        = "${params.outdir}/pipeline_info"

    // client-specific variables to be used in pipeline introspection reporting
    raci_owner        = "Lifebit"
    domain_keywords   = "etl; omop; biobanks; Genomics England (GEL); Finngen; UK Biobank (UKB)"
    unique_identifier = "1156219d800535edf834ca403aa93b72"

    // inputs
    phenofileName              = 'phenofile'
    covariateSpecifications    = 's3://lifebit-featured-datasets/pipelines/etl_omop2phenofile/covariate_specs.json'
    cohortSpecifications       = false
    codelistSpecifications     = false
    domain                     = false
    conceptType                = false
    controlIndexDate           = false

    path_to_db_jars            = 'assets/jars/postgresqlV42.2.18.zip'
    sqlite_db                  = 's3://lifebit-featured-datasets/pipelines/etl_omop2phenofile/cdm.sqlite'
    pheno_label                = 'PHE'
    convert_plink              = 'true'

    database_dbms              = false
    database_cdm_schema        = false
    database_cohort_schema     = false

    database_name              = false
    database_host              = false
    database_port              = false
    database_username          = false
    database_password          = false

    param_via_aws                         = false
    aws_region                            = "eu-west-2"
    aws_param_name_for_database_name      = false
    aws_param_name_for_database_host      = false
    aws_param_name_for_database_port      = false
    aws_param_name_for_database_username  = false
    aws_param_name_for_database_password  = false

    // when set to true, prints help and exits
    help = false

    // default container for all processes, excluding those defined differently via the usage with 'withName'
    container = 'quay.io/lifebitaiorg/etl_omop2phenofile:latest'

    // process resources defaults
    cpus   = 2
    memory = 4.GB
    disk   = '30.GB'

    // max resources limits defaults
    max_cpus   = 2
    max_memory = 4.GB
    max_time   = 8.h

    // execution related defaults
    config        = 'conf/standard.config'
    echo          = false
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries    = 9
    maxForks      = 200
    queueSize     = 200
    executor      = false
}


// 2. Profiles


// Do not update the order because the values set in params scope will not be overwritten
// Do not attempt to simplify to
// includeConfig params.config
// outside of profiles scope, it will fail to update the values of the params
profiles {
    standard {includeConfig params.config}
    docker { docker.enabled = true }
    nodocker { docker.enabled = false }
    cohortsFromSpec {includeConfig 'conf/cohortsFromSpec.config'}
    cohortsFromCodelist {includeConfig 'conf/cohortsFromCodelist.config'}
    singularity {includeConfig 'conf/singularity.config'}
    meta_ci_testing { includeConfig 'conf/meta_ci_testing.config' }
}

// 3. Process

// Do not change order of block, must follow after profiles scope (last section that updates params)
process {
    echo          = params.echo
    cpus          = params.cpus
    memory        = params.memory
    maxRetries    = params.maxRetries
    maxForks      = params.maxForks
    container     = params.container
    errorStrategy = params.errorStrategy

}

// 4. Executor - Do not remove this section! Required for running with different executors using --executor parameter

executor {
    name      = params.executor
    queueSize = params.queueSize
}

// 5. Nextflow timeline, report and trace reports

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    fields  = 'task_id,native_id,process,name,tag,status,exit,cpus,%cpu,memory,%mem,rss,vmem,peak_rss,peak_rss,container'
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
