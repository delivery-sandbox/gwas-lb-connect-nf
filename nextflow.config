// Please do not change the order of the numbered sections!
// The expected order is: 1. Parameters - 2. Profiles - 3. Process -  4. Executor
// There is a high chance it would break the configuration of 'profiles'

manifest {
    name            = 'lifebit-ai/etl_omop2phenofile'
    homePage        = 'https://github.com//lifebit-ai/etl_omop2phenofile'
    description     = 'This is nextflow template pipeline, which helps accelerate the pipeline development process'
    mainScript      = 'main.nf'
    version         = '1.3.0'
}

// 1. Parameters

// NOTE:
// Initialise the values of the params to the preferred default value or to false
params {
    // output folder options
    outdir          = 'results'
    tracedir        = "${params.outdir}/pipeline_info"

    // client-specific variables to be used in pipeline introspection reporting
    raci_owner        = "Lifebit"
    domain_keywords   = "etl; omop; biobanks; Genomics England (GEL); Finngen; UK Biobank (UKB)"
    unique_identifier = "1156219d800535edf834ca403aa93b72"

    // inputs
    phenofileName              = 'phenofile'
    covariateSpecifications    = 's3://lifebit-featured-datasets/pipelines/etl_omop2phenofile/covariate_specs.json'
    cohortSpecifications       = false
    codes_to_include           = false
    codes_to_exclude           = false
    codes_vocabulary           = 'ICD10'
    domain                     = "ConditionOccurrence"
    conceptType                = "sourceConceptId"
    controlIndexDate           = "random"

    path_to_db_jars            = 'assets/jars/postgresqlV42.2.18.zip'
    sqlite_db                  = 's3://lifebit-featured-datasets/pipelines/etl_omop2phenofile/cdm.sqlite'
    pheno_label                = 'PHE'
    convert_plink              = 'true'

    genotypic_linking_table    = false
    genotypic_id_col           = false
    original_id_col            = false

    tre = false
    database_dbms              = false
    database_cdm_schema        = false
    database_cohort_schema     = false

    database_name              = false
    database_host              = false
    database_port              = false
    database_username          = false
    database_password          = false

    param_via_aws                         = false
    aws_region                            = "eu-west-2"
    aws_param_name_for_database_name      = false
    aws_param_name_for_database_host      = false
    aws_param_name_for_database_port      = false
    aws_param_name_for_database_username  = false
    aws_param_name_for_database_password  = false

    // when set to true, prints help and exits
    help = false

    // default container for all processes, excluding those defined differently via the usage with 'withName'
    container = 'quay.io/lifebitaiorg/etl_omop2phenofile:latest'
    gwas_container = 'quay.io/lifebitai/gwas:1.2dev'

    // process resources defaults
    cpus   = 2
    memory = 8.GB
    disk   = '30.GB'

    // max resources limits defaults
    max_cpus   = 2
    max_memory = 4.GB
    max_time   = 8.h

    // execution related defaults
    config        = 'conf/standard.config'
    echo          = false
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries    = 9
    maxForks      = 200
    queueSize     = 200
    executor      = false

    omop2pheofile_mode = true

    // from gwas-nf
    // Genetic data input
    genotype_files_list = null
    genotype_format = "vcf"
    input_folder_location = null
    file_pattern = null
    file_suffix = "vcf.gz"
    index_suffix = "vcf.gz.csi"
    number_of_files_to_process = -1
    extract_pruned_region = true
    analyse_hard_called_gt = true
    genome_build = null  // e.g. "GRCh38"

    // Phenotypic data input
    pheno_data = false
    covariate_cols = "ALL" // "ALL" | "NONE" | "comma,seperated,colnames"
    phenotype_colname = false
    pheno_transform = false

    // ---------------
    // GWAS methods:

    // SAIGE
    saige = true
    saige_step1_extra_flags = "--LOCO=FALSE"
    // Saige association analysis mode, accepts "additive" (default), "recessive", "dominant", "het"
    saige_step2_analysis_type = "additive"
    //Deafult the finngen one that supports the extra modes listed above, alternatively 'quay.io/lifebitai/saige:0.39', that only supports additive
    saige_container = 'finngen/saige:0.39.1.fg'

    // PLINK2 GWAS
    plink2_gwas = false
    plink2_gwas_method = "genotypic" // genotypic | dominant | recessive
    plink2_gwas_glm_flags = ""
    plink2_vif = 50

    // BOLT-LMM
    bolt_lmm = false
    ld_scores = "s3://gwas-reference-files/bolt-lmm/LDSCORE.1000G_EUR.tab.gz"

    // REGENIE
    regenie = false
    regenie_min_imputation_score = 0.00
    regenie_min_mac = 5
    regenie_geno_model = "additive" // additive | dominant | recessive
    force_step1 = false
    regenie_cpus = 2


    // FastGWA GLMM
    fastgwa_glmm = false

    // Hail-GWAS
    hail = false
    hail_call_rate_thr = 0.97

    // ---------------

    // Filtering parameters
    q_filter = '0.005:minor'
    maf = 0.05    // Filter out all variants with minor allele frequency < maf
    mac = 1       // Filter out all variants with minor allele count < mac
    miss = 0.1    // Filter out all variants with missingness > miss
    mind_threshold = 0.1 // Remove individuals with overall missingness > mind_threshold i.e. individuals with >10% missingness
    miss_test_p_threshold = '1e-5'
    hwe_threshold = '1e-5'
    hwe_test = 'midp'
    sex_check = true
    remove_multiallelics = false

    het_std_exclusion_threshold = 3

    // LD pruning
    high_LD_long_range_regions = "s3://lifebit-featured-datasets/pipelines/bi-gwas-nf/high-LD-regions-hg38-GRCh38.txt"
    ld_window_size = 50
    ld_step_size = 10
    ld_r2_threshold = 0.1

    // Removing related individuals
    remove_related_samples = true
    king_coefficient = 0.0884 // 2nd degree relative

    // KING ancestry inference tool options
    rsid_cpra_table = "s3://lifebit-featured-datasets/pipelines/omics/rsid_cpra.tsv"
    king_reference_data = 's3://omics-example-datasets/pipelines/gwas/tools/king/ancestry-reference-files/KGref.{bed,bim,fam}.xz'
    run_ancestry_inference = false
    min_subpop_size = 100

    // PCA & outlier removal
    run_pca = true
    number_pcs = 20
    remove_outliers_maxiter = 5 // set to 0 to run PCA with no outlier removal
    remove_outliers_sigma = 6.0
    annotate_with_rsids = false

    // Results
    outdir = 'results'

    // Overwrite the RSID by combination of CHR_POS_REF_ALT
    overwrite_var_ids = false

    // max resources limits defaults
    max_cpus = 32
    max_memory = 240.GB
    max_time = 8.h

    // process resource group default
    u_memory = 2.GB
    u_cpus = 1
    s_memory = 6.GB
    s_cpus = 4
    m_memory = 30.GB
    m_cpus = 8
    l_memory = 60.GB
    l_cpus = 16

    // execution related defaults
    debug = false
    config = 'conf/standard.config'
    echo = false
    errorStrategy = 'retry'
    maxRetries = 3
    maxForks = 200
    queueSize = 200
    executor = false
}


// 2. Profiles


// Do not update the order because the values set in params scope will not be overwritten
// Do not attempt to simplify to
// includeConfig params.config
// outside of profiles scope, it will fail to update the values of the params
profiles {
    standard {includeConfig params.config}
    docker { docker.enabled = true }
    nodocker { docker.enabled = false }
    cohortsFromSpec {includeConfig 'conf/cohortsFromSpec.config'}
    cohortsFromCodelist {includeConfig 'conf/cohortsFromCodelist.config'}
    singularity {includeConfig 'conf/singularity.config'}
    meta_ci_testing { includeConfig 'conf/meta_ci_testing.config' }
    test_gwas_lb_connect { includeConfig 'conf/test_gwas_lb_connect.config' }
    // tre specific profiles
    bi { includeConfig 'conf/bi.config' }
    gel { includeConfig 'conf/gel.config' }
}

// 3. Process

// Do not change order of block, must follow after profiles scope (last section that updates params)
process {
  echo          = params.echo
  maxRetries    = params.maxRetries
  maxForks      = params.maxForks
  container     = params.container
  errorStrategy = params.errorStrategy

  withLabel: gwas_default {
    container = params.gwas_container
  }
  withLabel: saige {
    container = params.saige_container
  }
  withLabel: bolt_lmm {
    container = 'quay.io/lifebitai/bolt-lmm:2.3.6_latest'
  }
  withLabel: regenie {
    container = 'quay.io/lifebitaiorg/gwas_nf_regenie:1.0.0'
  }
  withLabel: fastgwa_glmm {
    container = 'quay.io/lifebitai/gcta:1.94.0_latest'
  }
  withLabel: hail {
    container = 'quay.io/lifebitai/hail:1.0.0'
  }
  withLabel: plink2_gwas {
    container = 'quay.io/lifebitai/plink2:v2.00a3LM_15_04_2022'
  }
  withName: infer_ancestry {
     container = 'quay.io/lifebitaiorg/gwas-king-ancestry:1.0.0'
  }
  withName: merge_plink {
     container = 'quay.io/lifebitai/plink2:v2.00a3LM_15_04_2022'
  }

  // Fallback default resources
  cpus = 1
  memory = 2.GB

  // Process-specific resource requirements
  withLabel: micro_resources {
    cpus = {check_max(params.u_cpus, 'cpus')}
    memory = {check_max((params.u_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory')}
  }
  withLabel: small_resources {
    cpus = {check_max(params.s_cpus, 'cpus')}
    memory = {check_max((params.s_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory')}
  }
  withLabel: medium_resources {
    cpus = {check_max(params.m_cpus, 'cpus')}
    memory = {check_max((params.m_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory')}
  }
  withLabel: large_resources {
    cpus = {check_max(params.l_cpus, 'cpus')}
    memory = {check_max((params.l_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory')}
  }
}

// 4. Executor - Do not remove this section! Required for running with different executors using --executor parameter

executor {
    name      = params.executor
    queueSize = params.queueSize
}

// 5. Nextflow timeline, report and trace reports

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    fields  = 'task_id,native_id,process,name,tag,status,exit,cpus,%cpu,memory,%mem,rss,vmem,peak_rss,peak_rss,container'
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
